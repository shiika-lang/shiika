# `(String) -> Int` conforms to `(T) -> Void` (#197)
[""].each do |s: String|
  0
end

class A
  # `Never` conforms to `Int`
  def self.todo -> Int
    panic "todo"
  end
end

# Enum cases conforms to the enum class
(fn(x: Maybe<Int>){ x })(Some.new(123))
(fn(x: Maybe<Int>){ x })(None)

# Array literal type inference
[] # Array<Object>
base class B; end
class C : B; end
[B.new, C.new] # Array<B>

# Modules
module M; end
class D : M
  def self.foo(x: Object); end
end
(fn(x: M){ D.foo(x) })(D.new)

puts "ok"
