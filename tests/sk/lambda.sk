# Basic
var f0 = fn{ false };
if f0(); puts "ng 0"; end
var f1 = fn(x: Int){ x + 1 }
if f1(1) != 2; puts "ng 1"; end
let f2 = fn(x: Int, y: Int){ x + y }
if f2(1, 2) != 3; puts "ng 1-1"; end

# Lambda in a method
class A
  def self.foo(i: Int) -> Int
    let f = fn(x: Int){ x + i }
    f(1)
  end
end
if A.foo(1) != 2; puts "ng 2"; end

# Capturing free vars
var a = 1
let g = fn(x: Int){
  let b = 2
  let h = fn(y: Int, z: Int) {
    a + b + x + y + z
  }
  h(3, 4)
}
unless g(5) == 15; puts "ng 3"; end

# Capturing bool
let t = true
let f1b = fn(x: Int) { t }
unless f1b(0); puts "ng 4"; end

# Updating value
a = 0
f1 = fn(x: Int) { a = 1 }
f1(0)
unless a == 1; puts "ng 5"; end

class UpdateFromNestedClosure
  def self.run
    var a = 0
    [1].each do |i|
      [1].each do |j|
        a = 1
      end
    end
    unless a == 1; puts "ng UpdateFromNestedClosure"; end
  end
end
UpdateFromNestedClosure.run

puts "ok"
