class GenericMethodTest
  def self.run<X>
    unless X == Int; puts "failed GenericMethodTest"; end
  end
end
GenericMethodTest.run<Int>

class InferredMethodTyArgTest
  def self.run<X>(x: X)
    unless X == Int; puts "failed InferredMethodTyArgTest"; end
  end
end
InferredMethodTyArgTest.run(99)

class ConstIsObjTyArgTest
  # `Void` is a special class that the constant holds the only instance rather
  # than the class object (which can be accessed as `Void.class`).
  def self.run1<X>(x: X)
    unless X == Void.class; puts "failed ConstIsObjTyArgTest 1"; end
  end
  # Other than `Void`, enum cases with no arguments (eg. Maybe::None) are set
  # the `const_is_obj` flag set to true.
  def self.run2<X>(x: X)
    unless X == None.class; puts "failed ConstIsObjTyArgTest 2"; end
  end
end
ConstIsObjTyArgTest.run1(Void)
ConstIsObjTyArgTest.run2(None)

class CaptureMethodTyargTest
  def self.run<X>
    let f = fn(){
      unless X == Int; puts "failed CaptureMethodTyargTest"; end
    }
    f()
  end
end
CaptureMethodTyargTest.run<Int>

module ModuleWithGenericMethod
  def run<X>
    unless X == Int; puts "failed GenericModuleMethodTest"; end
  end
end
class GenericModuleMethodTest : ModuleWithGenericMethod
end
GenericModuleMethodTest.new.run<Int>

class TestRetTyUsesMethodTyArg<X>
  def run(item: X) -> X
    A.new.foo(item)
  end

  class A
    def foo<Y>(item: Y) -> Y
      item
    end
  end
end
TestRetTyUsesMethodTyArg<Int>.new.run(123)

class TestRetTyUsesClassTyArg<X>
  def run(item: X) -> X
    A<X>.new.foo(item)
  end

  class A<Y>
    def foo(item: Y) -> Y
      item
    end
  end
end
TestRetTyUsesClassTyArg<Int>.new.run(123)

class TestRetTyUsesModuleTyArg
  def run
    C<Int, Bool>.new.foo(123)
  end

  module M<MA, MB>
    def foo(item: MB) -> MB
      item
    end
  end

  class C<CA, CB> : M<CB, CA>
  end
end
TestRetTyUsesModuleTyArg.new.run

puts "ok"
