---
source: lib/skc_async_experiment/tests/cps.rs
expression: compile(sk_path).unwrap()
input_file: lib/skc_async_experiment/tests/cps/async.sk
---
extern([+]) print (Int)->Void;
extern() sleep_sec (ChiikaEnv,Int,(ChiikaEnv,Void)->RustFuture)->RustFuture;
extern([+]) Int#+ (Int,Int)->Int;
extern([+]) Int#- (Int,Int)->Int;
extern([+]) Int#* (Int,Int)->Int;
extern([+]) Int#% (Int,Int)->Int;
extern([+]) Int#and (Int,Int)->Int;
extern([+]) Int#or (Int,Int)->Int;
extern([+]) Int#xor (Int,Int)->Int;
extern([+]) Int#lshift (Int,Int)->Int;
extern([+]) Int#rshift (Int,Int)->Int;
extern([+]) Int#< (Int,Int)->Bool;
extern([+]) Int#<= (Int,Int)->Bool;
extern([+]) Int#> (Int,Int)->Bool;
extern([+]) Int#>= (Int,Int)->Bool;
extern([+]) Int#== (Int,Int)->Bool;
fun run(ChiikaEnv $env, (ChiikaEnv,Int)->RustFuture $cont) -> RustFuture {
  chiika_env_push_frame(%arg0, 1)  #-> Void
  chiika_env_set(%arg0, 0, (%arg1 as Any), 6)  #-> Void
  return sleep_sec[*](%arg0, 1, run_1) # RustFuture  #-> Never
}
fun run_1(ChiikaEnv $env, Void $async_result) -> RustFuture {
  %arg1  #-> Void
  alloc $0  #-> Void
  $0 = 2  #-> Void
  return (chiika_env_pop_frame(%arg0, 1) as (ChiikaEnv,Int)->RustFuture)(%arg0, $0) # RustFuture  #-> Never
}
