# Original: https://github.com/ruby/ruby/blob/master/benchmark/so_mandelbrot.rb
# How to run
#   $ cargo run -- run examples/mandel.sk > a.pbm
#   $ open a.pbm   # With Preview.app or something
#
# This is not much a good example because Shiika is not designed for such
# CPU-intensive tasks. However this was good when I just started Shiika 
# because this program requires little language constructs and yet produces
# a fun result.
let size = 600
puts "P4"
puts "#{size} #{size}"

ITER = 49
LIMIT_SQUARED = 4.0

var byte_acc = 0
var bit_num = 0
let buf = MutableString.new

let count_size = size - 1

var a = 0;
var b = 0;
var y=0; while y <= count_size
  var x=0; while x <= count_size
    var zr = 0.0
    var zi = 0.0
    let cr = (2.0*x.to_f/size.to_f)-1.5
    let ci = (2.0*y.to_f/size.to_f)-1.0
    var escape = false

    var dummy = 0; while dummy <= ITER
      let tr = zr*zr - zi*zi + cr
      let ti = 2.0*zr*zi + ci
      zr = tr
      zi = ti

      if (zr*zr+zi*zi) > LIMIT_SQUARED
        escape = true
        break
      end
      dummy += 1
    end

    byte_acc = byte_acc.lshift(1).or(if escape then 0 else 1 end)
    bit_num += 1

    if bit_num == 8
      buf.append_byte(byte_acc)
      byte_acc = 0
      bit_num = 0
      a += 1
    elsif x == count_size
      byte_acc = byte_acc.lshift(8 - bit_num)
      buf.append_byte(byte_acc)
      byte_acc = 0
      bit_num = 0
      b += 1
    end

    x += 1
  end
  y += 1
end
print buf.to_s
