require "./result.sk"

module Readable
  requirement fill_buf -> Result<String>  # TODO: Result<MutableString>
  requirement consume(n_bytes: Int)

  def read_line -> Result<Maybe<String>>
    let l = MutableString.new
    var done = false
    while true
      let s = fill_buf.try!
      if s.bytesize == 0
        done = true
      else
        s.each_byte do |b|
          if b == 10 # LF(\n)
            consume(1)
            done = true
            break
          end
          l.append_byte(b)
          consume(1)
        end
      end
      break if done
    end
    Ok.new(
      if l.empty?
        None
      else
        Some.new(l._unsafe_to_s)
      end
    )
  end

  def lines -> Result<Array<String>>
    let a = Array<String>.new
    while true
      match read_line
      when Ok(Some(s))
        a.push(s)
      when Ok(None)
        break
      when Fail(e)
        return Fail.new(e)
      end
    end
    Ok.new(a)
  end

  def read -> Result<String>
    let acc = MutableString.new
    while true
      let s = fill_buf.try!
      if s.bytesize == 0
        break
      else
        acc.append(s)
        consume(s.bytesize)
      end
    end
    Ok.new(acc._unsafe_to_s)
  end
end
