# TODO: Move to _tuples.sk (#233)
class Pair<A, B>
  def initialize(@fst: A, @snd: B); end
end

class Triple<A, B, C>
  def initialize(@fst: A, @snd: B, @thd: C); end
end

# TODO: Make this behave as ordered hash (like Ruby's)
class Hash<K, V>
  N_TABLES = 1000

  class Table<K, V>
    def initialize
      @pairs = Array<Pair<K, V>>.new
    end

    # Set the value of specified key.
    def []=(key: K, value: V)
      var done = false
      @pairs.each do |pair: Pair<K, V>|
        if pair.fst == key
          pair.snd = value
          done = true
        end
      end
      unless done
        @pairs.push(Pair<K, V>.new(key, value))
      end
    end

    # Get the value of specified key.
    # If that key does not exist, the behavior is undefined (TODO: Return Option<V>)
    def [](key: K) -> V
      var ret = @pairs.first.snd
      @pairs.each do |pair: Pair<K, V>|
        if pair.fst == key
          ret = pair.snd
        end
      end
      ret
    end

    # Return true if `self` has `key` (compared with `==`)
    def has_key(key: K) -> Bool
      var ret = false
      @pairs.each do |pair: Pair<K, V>|
        if pair.fst == key
          ret = true
        end
      end
      ret
    end

    # Return list of the keys
    def keys -> Array<K>
      ret = Array<K>.new
      @pairs.each do |pair: Pair<K, V>|
        ret.push(pair.fst)
      end
      ret
    end

    # Return list of the values
    def values -> Array<V>
      ret = Array<V>.new
      @pairs.each do |pair: Pair<K, V>|
        ret.push(pair.snd)
      end
      ret
    end
  end

  def initialize
    @tables = Array<Hash::Table<K, V>>.new
    N_TABLES.times{|_: Int| @tables.push(Hash::Table<K, V>.new) }
  end

  # Return the `Hash::Table` which contains the `key`
  def _table(key: K) -> Hash::Table<K, V>
    @tables[key.hash % @tables.length]
  end

  # Set the value of specified key.
  def []=(key: K, value: V)
    _table(key)[key] = value
  end

  # Get the value of specified key.
  # If that key does not exist, the behavior is undefined (TODO: Return Option<V>)
  def [](key: K) -> V
    _table(key)[key]
  end

  # Return true if `self` has `key` (compared with `==`)
  def has_key(key: K) -> Bool
    _table(key).has_key(key)
  end

  # Return list of the keys
  def keys -> Array<K>
    ret = Array<K>.new
    @tables.each do |table: Hash::Table<K, V>|
      ret.append(table.keys)
    end
    ret
  end

  # Return list of the values
  def values -> Array<V>
    ret = Array<V>.new
    @tables.each do |table: Hash::Table<K, V>|
      ret.append(table.values)
    end
    ret
  end
end
