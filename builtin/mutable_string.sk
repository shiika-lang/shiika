class MutableString
  INITIAL_STR_CAPA = 10

  # TODO: inherit from String #206
  def nth_byte(n: Int) -> Int
    if n < 0
      panic "[String#nth_byte: index less than zero]"
    end
    if n >= @bytesize
      panic "[String#nth_byte: index too large]"
    end
    (@ptr+n).read
  end


  def initialize
    var @ptr = Shiika::Internal::Memory.gc_malloc(INITIAL_STR_CAPA+1)
    # Maximum number of bytes (does not included the last null)
    var @capa = INITIAL_STR_CAPA
    var @bytesize = 0
  end

  # Concatenates `other` to `self`.
  # The content of `self` will be changed (`other` is not.)
  def append(other: String)
    let new_bytesize = @bytesize + other.bytesize
    _realloc_if_needed(new_bytesize)
    Shiika::Internal::Memory.memcpy(@ptr + @bytesize, other.ptr, other.bytesize)
    @bytesize = new_bytesize
  end

  # Appends a byte to the end of `self`.
  def append_byte(b: Int)
    @bytesize += 1
    _realloc_if_needed(@bytesize)
    write_byte(@bytesize - 1, b)
  end

  # Create a immutable clone of self. The contents of the returned string will not change
  # even if this object is dectructively modified.
  def to_s -> String
    let newptr = Shiika::Internal::Memory.gc_malloc(@bytesize + 1)
    Shiika::Internal::Memory.memcpy(newptr, @ptr, @bytesize)
    String.new(newptr, @bytesize)
  end

  # Update the `nth` byte of `self` to `byte`
  # If `nth` is larger than `self.bytesize`, additional memory is allocated.
  def write_byte(nth: Int, byte: Int)
    if nth < 0
      panic "[String#write_byte: index less than zero]"
    end
    if byte < 0
      panic "[String#write_byte: byte less than zero]"
    end
    if byte >= 256
      panic "[String#write_byte: byte larger than 255]"
    end
    _realloc_if_needed(nth)
    (@ptr + nth).write(byte)
    if @bytesize <= nth
      @bytesize = nth + 1
    end
  end

  # Resize `self` if needed
  def _realloc_if_needed(new_bytesize: Int)
    if @capa < new_bytesize
      @ptr = Shiika::Internal::Memory.gc_realloc(@ptr, new_bytesize+1)
      @capa = new_bytesize
    end
  end

  # Create a immutable version of self without copying memory.
  # Unsafe unless the original immediately gets GC'd
  def _unsafe_to_s -> String
    String.new(@ptr, @bytesize)
  end
end
